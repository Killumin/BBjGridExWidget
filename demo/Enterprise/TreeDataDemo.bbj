rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BBjGridExWidget/BBjGridExWidgetRenderers.bbj::BBjGridExWidgetRendererCustomHTML
use ::BBjGridExWidget/BBjGridExWidgetExpressions.bbj::BBjGridExWidgetExpressionBytesFormatter
use ::BBjGridExWidget/Demo/assets/Utilities.bbj::BBjGridExWidgetDemoUtilities
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.importer.FileSystemScanner
use java.util.ArrayList

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare BBjGridExWidget grid!
declare Boolean treeViewIsCreated!
treeViewIsCreated! = Boolean.FALSE

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Tree Demo")
wnd!.setBackColor(new BBjColor(45,52,54))
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")

ed! = wnd!.addEditBox(200,10,8,210,25,"")
ed!.setPlaceholder("Enter a directory to show ...")
ed!.setBackColor(new BBjColor(45,52,54))
ed!.setForeColor(new BBjColor(245,245,245))
tb_set! = wnd!.addButton(301,230,8,200,25,"Create TreeView")
tb_set!.setCallback(BBjAPI.ON_BUTTON_PUSH,"createTreeView")

edSearch! = wnd!.addEditBox(201,580,8,210,25,"")
edSearch!.setPlaceholder("Enter a term to search ...")
edSearch!.setBackColor(new BBjColor(45,52,54))
edSearch!.setForeColor(new BBjColor(245,245,245))
edSearch!.setCallback(BBjAPI.ON_EDIT_MODIFY,"onSearchButton")

REM init the grid
grid! = new BBjGridExWidget(wnd!,100,0,40,wnd!.getWidth(),wnd!.getHeight() - 40)
wnd!.setBackColor(new BBjColor(45,52,54))
grid!.getSidebar().setHiddenByDefault(1)
grid!.getOptions().setGroupDefaultExpanded(0)
grid!.getOptions().setGroupColumnLabel("BBjGridExWidget Demo")
grid!.getOptions().setShowGroupChildCount(0)
grid!.setTheme("balham-dark")

rem /**
rem  * Enable tree mode and load a lodash template to convert the "filepath" property in the rows data 
rem  * to an JS array which will be used to compose the tree hierarchy
rem  */
grid!.getOptions().setTreeData(1)
grid!.getOptions().setDataPathTemplate("<% return data.filepath.split(""\" + java.io.File.separator + """); %>")

rem /**
rem  * Configure the group column (files). 
rem  * 
rem  * The grid provides be default sensible configuration , but 
rem  * you can hook on and change these settings using the AutoGroupColumnDefinition
rem  * load a lodash template and replace the icons in the template with base64 strings of the selected images 
rem  * on the disk. then we create a custom html renderer. the renderer will be used inside the default group renderer
rem  * (BBjGridExWidgetRendererGroupCellRenderer).
rem  */
template! = BBjGridExWidgetDemoUtilities.readAssetsAsString("templates/tree-icons-custom-template.tpl")
template! = template!.replaceAll("__FILE_ICON", BBjGridExWidget.imageToBase64("BBjGridExWidget/Demo/assets/images/file.png"))
template! = template!.replaceAll("__FOLDER_ICON",BBjGridExWidget.imageToBase64("BBjGridExWidget/Demo/assets/images/folder.png"))

autoGroupDef! = grid!.getOptions().getAutoGroupColumnDefinition()
autoGroupDef!.setPinned("left")
autoGroupDef!.setWidth(500)
autoGroupDef!.getCellRenderer().setInnerRenderer(new BBjGridExWidgetRendererCustomHTML(template!))

grid!.setCallback(grid!.ON_GRID_CELL_DOUBLE_CLICK(),"onSelectionEvent")

process_events

createTreeView:   
  syspath! = ed!.getText()
  grid!.setData(FileSystemScanner.getDataSystemAsResultSet(syspath!, ""),0)

  filePath! = grid!.getColumn("filepath") 
  filePath!.setHidden(1)
  size! = grid!.getColumn("size") 
  size!.setAggFunc("sum")
  size!.setAlignment(BBjGridExWidget.GRID_ALIGN_RIGHT() , 1)
  size!.setValueFormatterExpression(new BBjGridExWidgetExpressionBytesFormatter("### ##0.00"))
  grid!.render()
  grid!.setFitToGrid()
  
  treeViewIsCreated! = Boolean.TRUE
return

rem /**
rem  * Set a quick filter on the grid to achieve through data search.
rem  *
rem  * Note : this filter is applied on the client data not the passed ResultSet
rem  */
onSearchButton:
  if treeViewIsCreated!
    search! = edSearch!.getText()
    grid!.setQuickFilter(search!)
  fi
return

rem /**
rem  * pormpt the current selected file
rem  */
onSelectionEvent:
  row! = grid!.getSelectedRow()
  dataRow! = row!.asDataRow()
  let x=MSGBOX(str(dataRow!.getFieldAsString("filepath")) , 0 , "Selected File")
return

rem /**
rem  * Listen to the BBjTopLevelWindow resize events and
rem  * resize the grid to fill the available space.
rem  */
resize:
  ev! = BBjAPI().getLastEvent()
  w=ev!.getWidth()
  h=ev!.getHeight()
  grid!.setSize(w,h - 40)
  grid!.setFitToGrid()
return

rem /**
rem  * Close the demo
rem  */
byebye:
bye