rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BBjGridExWidget/BBjGridExWidgetState.bbj::BBjGridExWidgetState
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow
use com.basiscomponents.db.ResultSetExporter
use com.basiscomponents.db.config.export.SheetConfiguration
use com.basiscomponents.bc.SqlQueryBC
use java.io.OutputStream
use java.io.FileOutputStream
use com.google.gson.JsonObject
use java.sql.Types
use com.google.gson.JsonParser

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare BBjGridExWidget grid!
declare Boolean writeHeader!

writeHeader! = Boolean.FALSE

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"ExcelExporter Demo")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")

tb_get! = wnd!.addButton(300,10,3,200,25,"Export with current changes")
tb_get!.setCallback(BBjAPI.ON_BUTTON_PUSH,"excelExport")

tb_writeHeader! = wnd!.addCheckBox(303,230,3,200,25,"Write Headers")
tb_writeHeader!.setCallback(BBjAPI.ON_CHECK_ON, "writeHeaderOn")
tb_writeHeader!.setCallback(BBjAPI.ON_CHECK_OFF,"writeHeaderOff")

tb_refresh! = wnd!.addButton(302,590,3,200,25,"Restore Default")
tb_refresh!.setCallback(BBjAPI.ON_BUTTON_PUSH,"refresh")

grid! = new BBjGridExWidget(wnd!,100,0,30,800,570)
grid!.setCallback(grid!.ON_GRID_COLUMN_STATE_CHANGE(),"onColumnStateChange")

gosub fillGrid
process_events

fillGrid:

  declare SqlQueryBC sbc!
  declare ResultSet rs!
  
  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))
  rs! = sbc!.retrieve("SELECT  CDNUMBER , ARTIST, TITLE, LABEL, PLAYINGTIME FROM CDINVENTORY")
  
  grid!.setData(rs!)
  
REM   title! = grid!.getColumn("Title")
  
  rem setup columns group style
  groupStyle! = new JsonObject()
  groupStyle!.addProperty("background","#03a9f4")
  groupStyle!.addProperty("color","white")
  groupStyle!.addProperty("font-weight","bolder")
  groupStyle!.addProperty("border-bottom","3px solid black")
  grid!.addStyle(".my-group-class" , groupStyle!)
  
  group! = new BBjVector()
  group!.addItem("CDNUMBER")
  grid!.addColumnGroup("group1" , "Inventory", group! , 0 , "my-group-class")
  
  group! = new BBjVector()
  group!.addItem("ARTIST")
  group!.addItem("TITLE")
  grid!.addColumnGroup("group2" , "CD Information", group! , 0 , "my-group-class")
  
  group! = new BBjVector()
  group!.addItem("LABEL")
  group!.addItem("PLAYINGTIME")
  grid!.addColumnGroup("group3" , "Misc",group! , 0 , "my-group-class")
return

resize:
  ev! = BBjAPI().getLastEvent()
  grid!.setSize(ev!.getWidth(),ev!.getHeight()-30)
return

excelExport:
  state! = grid!.getColumnState()
 
  declare JsonParser parser!
  declare SheetConfiguration sheetConfig!
  sheetConfig! = new SheetConfiguration()
  declare OutputStream out!
  parser! = new JsonParser()
 
REM  Getting the information for the sheetConfiguration
  columns! = parser!.parse(state!.toString()).getAsJsonObject().get("columns").getAsJsonArray()
  it! = columns!.iterator()
  while (it!.hasNext())
      next! = it!.next().getAsJsonObject()
        ? next!.get("colId").getAsString()
        ? next!.get("width").getAsInt() * 25
        ? next!.get("hide").getAsBoolean()
        sheetConfig!.addColumn(next!.get("colId").getAsString(), next!.get("width").getAsInt()*25, next!.get("hide").getAsBoolean())
  wend

REM  Get the ResultSet to export
  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))
  rs! = sbc!.retrieve("SELECT  CDNUMBER , ARTIST, TITLE, LABEL, PLAYINGTIME FROM CDINVENTORY")
 
REM Choose a location
  out! = new FileOutputStream(DIR("") + "\assets\excelExports\test1.xlsx")

  ? "Exporting.."
  ResultSetExporter.writeXLSX(rs!, out!, writeHeader!, Boolean.FALSE , "MyLabel", null(), sheetConfig!) 
  ? "Exported!"
  
  out!.close()
return

writeHeaderOn:
    writeHeader! = Boolean.TRUE
return

writeHeaderOff:
    writeHeader! = Boolean.FALSE
return

onColumnStateChange:
    tb_get!.setEnabled(1)
return

refresh:
    grid!.render()
return

byebye:
bye